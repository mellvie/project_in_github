

































#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

#include "main_logic.h"
#include "User.h"
#include "commands.h"
#include <cstdio>
#include <iostream>
#include <string>

main_logic::main_logic(){
        m_user = new User();
        m_input_buff = new std::string();
        m_com_tool = new commands();
        //true mean it is running
        m_run_sta = true;
}

void main_logic::show_beginning(){
        std::cout << "********poxyKuar/Poxy_Location**********" << std::endl;
        std::cout << "You can enter help or call the email address mellviewangyi@163.com" << std::endl << std::endl;
}

void main_logic::show_ending(){
        std::cout << "Thank you to use it" << std::endl << "Bye bye!" << std::endl;
}

void main_logic::show_enter_beginning(){
        std::cout << "[" << this->m_user->get_name() << "]_$ ";
}

std::string main_logic::get_input_com(){
        std::cin >> *(this->m_input_buff);
        return *m_input_buff;
}

void main_logic::do_command(){
        switch (this->m_com_tool->find_command(*(this->m_input_buff))) {
                // -1 mean that no commands could be found
                case -1:
                        this->could_not_found_com();
                        break;
                case 0:
                        this->command_exit();
                        break;
                case 1:
                        this->command_help();
                        break;
                case 2:
                        this->command_setuname();
                        break;
                case 3:
                case 4:
                        this->command_addngroup();
                        break;
                case 5:
                case 6:
                        this->command_addnbeacon();
                        break;
                case 7:
                case 8:
                        this->command_listbeacon();
                        break;
                case 9:
                case 10:
                        this->command_listgroup();
                        break;
        }
}

bool main_logic::get_run_sta(){
        return this->m_run_sta;
}

std::string main_logic::get_lines_input(){
        std::string in_str;

        char cur = 0;
        while(cur != '#'){
                cur = std::cin.get();
                in_str.push_back(cur);
        }
        return in_str;
}

void main_logic::could_not_found_com(){
        std::cout << "ERROR: not found the commands ~\"" << *(this->m_input_buff) << "\"~" << std::endl;
}

void main_logic::display_one_beacon(Beacon* bea){
        if(nullptr == bea)
                return;
        std::cout << "Name: " <<*bea->get_name() << std::endl 
                << "Discribe: " << *bea->get_describe() << std::endl
                << "x = " << bea->get_position()->get_x() << "\t" << bea->get_position()->get_y() << std::endl
                << "Type: " << bea->get_type() << std::endl; //
}

void main_logic::display_one_bg(Beacon_Group* bg){
        if(nullptr == bg)
                return;
        std::cout << "Beacon_Group Name: " << *bg->get_name() << std::endl
                << "Discribe: " << *bg->get_describe() << std::endl
                << "There are " << bg->get_beacon_number() << " Beacons in it" << std::endl;
}

/************************commmand func************************/
void main_logic::command_exit(){
        this->m_run_sta = false;
}
void main_logic::command_help(){
        std::cout << std::endl << "______________this is HELP_______________" << std::endl
                << "There are many commands,you can look the commands_list.txt to see or email the address mellviewangyi@163.com"
                << std::endl << std::endl;
}
void main_logic::command_setuname(){
        std::cout << "~New User Name: ";
        std::string newname;
        std::cin >> newname;
        this->m_user->set_name(newname);
        std::cout << "Set sucessfully!" << std::endl;
}
void main_logic::command_addngroup(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();

        std::cout << std::endl << "New Beacon_Group Name: ";
        std::cin >> *(in_name);
        std::cout << "Discribe about this Beacon_Group: ";
        *in_dis = this->get_lines_input(); //read '#' stop

        Beacon_Group * n_g = new Beacon_Group();
        n_g->set_name(in_name);
        n_g->set_describe(in_dis);

        this->m_user->add_group(*(n_g));

        std::cout << "Beacon_Group: " << *in_name << " add sucessfully" << std::endl;

        // free 
        delete n_g;
        delete in_name;
        delete in_dis;
}

void main_logic::command_addnbeacon(){

        std::string* in_name = new std::string();
        std::string* in_dis = new std::string();
        std::string* in_group_name = new std::string();
        Position* in_posi = new Position();
        Beacon_Type in_bt = Beacon_Type::Normal;

        double x =0, y=0;
        std::cout << std::endl << "New Beacon Name: ";
        std::cin >> *in_name;
        std::cout << "Discribe about this Beacon: "; 
        *in_dis = this->get_lines_input(); //read '#' stop

        std::cout << "x = ";
        std::cin >> x;
        std::cout << "y = ";
        std::cin >> y;
        in_posi->set_xy(x, y);

        Beacon* n_b = new Beacon();

        std::cout << "Which group would you let it belong?" << std::endl 
                << "If you want to let it belong to User Normal Beacon_Group, you can enter \"Normal\" or \"n\""
                << std::endl;
        std::cout << "Name of the Beacon_Group that it belong to: ";
        std::cin >> *in_group_name;

        this->m_user->add_beacons_to_group(n_b, 1, *in_group_name);

        n_b->set_position(in_posi);
        n_b->set_name(in_name);
        n_b->set_describe(in_dis);
        n_b->set_group_belong_to(this->m_user->get_user_nor_group());
        n_b->set_type(in_bt);

        delete n_b;
        delete in_dis;
        delete in_name;
        delete in_posi;
}
void main_logic::command_listbeacon(){

        //std::cout << this->m_user->get_user_nor_group()->get_name() << ":" << std::endl;
        this->display_one_bg(this->m_user->get_user_nor_group());
        for(int i = 0; i < this->m_user->get_user_nor_group()->get_beacon_number(); ++ i){
                std::cout << std::endl;
                this->display_one_beacon(&(this->m_user->get_user_nor_group()->get_beacon_array()[i]));
        }
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
                for(int j =0; j < this->m_user->get_bg_arr()[i]->get_beacon_number(); ++ j){
                        this->display_one_beacon(&(this->m_user->get_bg_arr()[i]->get_beacon_array()[j]));
                }
        }

}
void main_logic::command_listgroup(){
        //TODO
        this->display_one_bg(this->m_user->get_user_nor_group());
        
        for(int i = 0; i < this->m_user->get_bg_num(); ++ i){
                std::cout << std::endl;
                this->display_one_bg(this->m_user->get_bg_arr()[i]);
        }

}
/************************commands func**************************/

main_logic::~main_logic(){
        if(nullptr != m_user)
                delete m_user;
        if(nullptr != m_input_buff)
                delete m_input_buff;
        if(nullptr != m_com_tool)
                delete m_com_tool;
}

